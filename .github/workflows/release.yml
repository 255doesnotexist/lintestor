name: release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          # - i686-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - riscv64gc-unknown-linux-gnu
          # - powerpc64-unknown-linux-gnu

    steps:
    - uses: actions/checkout@v4

    - name: Pull Docker image from Docker Hub
      run: docker pull 255doesnotexist/lintestor-cross-compile:latest

    - name: Get version and commit info
      id: version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        COMMIT_ID=$(git rev-parse --short HEAD)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "commit_id=$COMMIT_ID" >> $GITHUB_OUTPUT
        echo "release_name=$VERSION-$COMMIT_ID" >> $GITHUB_OUTPUT

    - name: Cross compile
      run: |
        TARGET="${{ matrix.target }}"
        
        # Build the Docker command with conditional environment variables
        DOCKER_CMD="docker run --rm -v ${{ github.workspace }}:/root/src"
        
        # Add target-specific environment variables for C dependencies
        case "$TARGET" in
          aarch64-unknown-linux-gnu)
            DOCKER_CMD="$DOCKER_CMD -e OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu"
            DOCKER_CMD="$DOCKER_CMD -e OPENSSL_INCLUDE_DIR=/usr/include"
            DOCKER_CMD="$DOCKER_CMD -e PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig"
            DOCKER_CMD="$DOCKER_CMD -e PKG_CONFIG_SYSROOT_DIR=/"
            ;;
          armv7-unknown-linux-gnueabihf)
            DOCKER_CMD="$DOCKER_CMD -e OPENSSL_LIB_DIR=/usr/lib/arm-linux-gnueabihf"
            DOCKER_CMD="$DOCKER_CMD -e OPENSSL_INCLUDE_DIR=/usr/include"
            DOCKER_CMD="$DOCKER_CMD -e PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig"
            DOCKER_CMD="$DOCKER_CMD -e PKG_CONFIG_SYSROOT_DIR=/"
            ;;
          riscv64gc-unknown-linux-gnu)
            DOCKER_CMD="$DOCKER_CMD -e OPENSSL_LIB_DIR=/usr/lib/riscv64-linux-gnu"
            DOCKER_CMD="$DOCKER_CMD -e OPENSSL_INCLUDE_DIR=/usr/include"
            DOCKER_CMD="$DOCKER_CMD -e PKG_CONFIG_PATH=/usr/lib/riscv64-linux-gnu/pkgconfig"
            DOCKER_CMD="$DOCKER_CMD -e PKG_CONFIG_SYSROOT_DIR=/"
            ;;
          # powerpc64-unknown-linux-gnu)
          #   DOCKER_CMD="$DOCKER_CMD -e OPENSSL_LIB_DIR=/usr/lib/powerpc64-linux-gnu"
          #   DOCKER_CMD="$DOCKER_CMD -e OPENSSL_INCLUDE_DIR=/usr/include"
          #   DOCKER_CMD="$DOCKER_CMD -e PKG_CONFIG_PATH=/usr/lib/powerpc64-linux-gnu/pkgconfig"
          #   DOCKER_CMD="$DOCKER_CMD -e PKG_CONFIG_SYSROOT_DIR=/"
          #   ;;
          *)
            # For host builds (x86_64) or targets without specific C deps, no special env vars needed
            ;;
        esac
        
        # Complete the Docker command
        DOCKER_CMD="$DOCKER_CMD 255doesnotexist/lintestor-cross-compile:latest"
        DOCKER_CMD="$DOCKER_CMD sh -c \"cd /root/src && cargo build --release --target ${TARGET} && mv target/${TARGET}/release/lintestor target/${TARGET}/release/lintestor-${TARGET}-${{ steps.version.outputs.release_name }}\""
        
        # Execute the Docker command
        eval "$DOCKER_CMD"

    - name: Listing targets
      run: |
        ls target/${{ matrix.target }}/release/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: lintestor-${{ matrix.target }}-${{ steps.version.outputs.release_name }}
        path: target/${{ matrix.target }}/release/lintestor-${{ matrix.target }}-${{ steps.version.outputs.release_name }}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Get version and commit info
      id: version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        COMMIT_ID=$(git rev-parse --short HEAD)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "commit_id=$COMMIT_ID" >> $GITHUB_OUTPUT
        echo "release_name=$VERSION-$COMMIT_ID" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.release_name }}
        release_name: ${{ steps.version.outputs.release_name }}
        draft: false
        prerelease: false

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: 'lintestor-*'

    - name: Listing artifacts
      run: |
        ls artifacts

    - name: Upload Release Assets
      run: |
        for artifact in artifacts/lintestor-*/*; do
          if [ -f "$artifact" ]; then
            ls -l "$artifact"
            asset_name=$(basename "$artifact")
            echo "Uploading $asset_name"
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=${asset_name}" \
              --data-binary "@$artifact"
          else
            echo "File $artifact not found, skipping."
          fi
        done
